name: Run Changed Scripts and Update Data

on:
  push:
    paths:
      - 'code/**'

permissions:
  contents: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-changes: ${{ steps.cf.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: tj-actions/changed-files@v45
        id: cf
        with:
          files: |
            code/*.R
            code/**/*.R
      
      - id: set-matrix
        run: |
          if [[ '${{ steps.cf.outputs.any_changed }}' == 'false' ]]; then
            echo "matrix={\"script\":[]}" >> $GITHUB_OUTPUT
          else
            files="${{ steps.cf.outputs.all_changed_files }}"
            json_array="["
            first=true
            for file in $files; do
              if [ "$first" = true ]; then
                json_array="$json_array\"$file\""
                first=false
              else
                json_array="$json_array,\"$file\""
              fi
            done
            json_array="$json_array]"
            echo "matrix={\"script\":$json_array}" >> $GITHUB_OUTPUT
          fi

  run-scripts:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: large-runner
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Git LFS
        run: |
          git lfs track "data/**"
          git add .gitattributes

      - uses: r-lib/actions/setup-r@v2

      - run: mkdir -p tmp

      - name: Install OS libs for sf
        if: matrix.script == 'code/geography.R'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libudunits2-dev \
            libgdal-dev \
            libgeos-dev \
            libproj-dev

      - uses: r-lib/actions/setup-renv@v2

      - name: Run R script
        run: |
          echo "Running ${{ matrix.script }}"
          Rscript --verbose "${{ matrix.script }}"

      - name: Commit data files with proactive sync and retry
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .gitattributes data/
            git commit -m "Update data from ${{ matrix.script }} via LFS [skip ci]"
            
            # Always pull/rebase first to get latest changes
            echo "Syncing with remote before push..."
            git pull --rebase origin main
            
            # Try push with retry logic and exponential backoff
            for i in {1..5}; do
              echo "Push attempt $i..."
              if git push; then
                echo "Push successful on attempt $i"
                break
              else
                echo "Push failed on attempt $i"
                if [ $i -lt 5 ]; then
                  wait_time=$((i * 10))  # Wait 10, 20, 30, 40 seconds
                  echo "Waiting ${wait_time} seconds before retry..."
                  sleep $wait_time
                  echo "Syncing with remote before retry..."
                  git pull --rebase origin main
                else
                  echo "All push attempts failed"
                  exit 1
                fi
              fi
            done
          else
            echo "No changes to commit"
          fi